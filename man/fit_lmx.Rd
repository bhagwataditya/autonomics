% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/8_fit_lmx.R
\name{fit_lmx}
\alias{fit_lmx}
\alias{fit_lm}
\alias{fit_lme}
\alias{fit_lmer}
\title{Fit lm, lme, or lmer}
\usage{
fit_lmx(
  object,
  fit,
  formula = default_formula(object),
  drop = varlevels_dont_clash(object, all.vars(formula)),
  coefs = colnames(create_design(object, formula = formula, drop = drop, codingfun =
    codingfun, verbose = FALSE)),
  block = NULL,
  opt = "optim",
  weightvar = if ("weights" \%in\% assayNames(object)) "weights" else NULL,
  statvars = c("effect", "p", "fdr"),
  verbose = TRUE,
  plot = FALSE
)

fit_lm(
  object,
  formula = default_formula(object),
  drop = varlevels_dont_clash(object, all.vars(formula)),
  codingfun = contr.treatment,
  block = NULL,
  weightvar = if ("weights" \%in\% assayNames(object)) "weights" else NULL,
  statvars = c("effect", "p", "fdr"),
  coefs = NULL,
  contrasts = NULL,
  verbose = TRUE,
  plot = FALSE
)

fit_lme(
  object,
  formula = default_formula(object),
  drop = varlevels_dont_clash(object, all.vars(formula)),
  codingfun = contr.treatment,
  block = NULL,
  weightvar = if ("weights" \%in\% assayNames(object)) "weights" else NULL,
  opt = "optim",
  statvars = c("effect", "p", "fdr"),
  coefs = NULL,
  contrasts = NULL,
  verbose = TRUE,
  plot = FALSE
)

fit_lmer(
  object,
  formula = default_formula(object),
  drop = varlevels_dont_clash(object, all.vars(formula)),
  codingfun = contr.treatment,
  block = NULL,
  weightvar = if ("weights" \%in\% assayNames(object)) "weights" else NULL,
  statvars = c("effect", "p", "fdr"),
  coefs = NULL,
  contrasts = NULL,
  verbose = TRUE,
  plot = FALSE
)
}
\arguments{
\item{object}{SummarizedExpriment}

\item{fit}{'lm', 'lme', or 'lmer'}

\item{formula}{formula}

\item{drop}{TRUE or FALSE}

\item{coefs}{NULL or stringvector}

\item{block}{NULL or svar}

\item{opt}{optimizer used in fit_lme: 'optim' (more robust) or 'nlminb'}

\item{weightvar}{NULL or svar}

\item{statvars}{character vector: subset of c('effect', 'p', 'fdr', 't')}

\item{verbose}{TRUE or FALSE}

\item{plot}{TRUE or FALSE}

\item{codingfun}{factor coding function
\itemize{
    \item contr.treatment:          intercept = y0,     coefi = yi - y0
    \item contr.treatment.explicit: intercept = y0,     coefi = yi - y0
    \item code_control:             intercept = ymean,  coefi = yi - y0
    \item contr.diff:               intercept = y0,     coefi = yi - y(i-1)
    \item code_diff:                intercept = ymean,  coefi = yi - y(i-1)
    \item code_diff_forward:        intercept = ymean,  coefi = yi - y(i+)
    \item code_deviation:           intercept = ymean,  coefi = yi - ymean (drop last)
    \item code_deviation_first:     intercept = ymean,  coefi = yi - ymean (drop first)
    \item code_helmert:             intercept = ymean,  coefi = yi - mean(y0:(yi-1))
    \item code_helmert_forward:     intercept = ymean,  coefi = yi - mean(y(i+1):yp)
}}

\item{contrasts}{unused. only to allow generic get(fitfun)(contrasts)}
}
\value{
SummarizedExperiment
}
\description{
Fit lm, lme, or lmer
}
\examples{
file <- download_data('atkin.metabolon.xlsx')
object <- read_metabolon(file)
fit_lm(    object, formula = ~subgroup)
fit_limma( object, formula = ~subgroup)
fit_limma( object, formula = ~subgroup, block = 'Subject')
fit_lme(   object, formula = ~subgroup, block = 'Subject')
fit_lmer(  object, formula = ~subgroup, block = 'Subject')
# fit_lme( object, formula = ~subgroup, block = ~1|Subject) # needs fine-tuning
# fit_lmer(object, formula = ~subgroup + (1|Subject))       # needs fine-tuning
}
