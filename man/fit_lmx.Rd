% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/8_fit_lmx.R
\name{fit_lmx}
\alias{fit_lmx}
\alias{fit_lm}
\alias{fit_lme}
\alias{fit_lmer}
\title{Fit lm, lme, or lmer}
\usage{
fit_lmx(
  object,
  fit,
  groupvar = "subgroup",
  formula = as.formula(sprintf("~ \%s", groupvar)),
  drop = varlevels_dont_clash(object, all.vars(formula)),
  codingfun = contr.treatment.explicit,
  coefs = model_coefs(object, formula = formula, drop = drop, codingfun = codingfun),
  block = NULL,
  opt = "optim",
  weightvar = if ("weights" \%in\% assayNames(object)) "weights" else NULL,
  statvars = c("effect", "p", "se", "t")[1:2],
  ftest = if (is.null(coefs)) TRUE else FALSE,
  sep = FITSEP,
  suffix = paste0(sep, fit),
  verbose = TRUE,
  plot = FALSE
)

fit_lm(
  object,
  formula = as.formula("~ subgroup"),
  drop = varlevels_dont_clash(object, all.vars(formula)),
  codingfun = contr.treatment.explicit,
  design = NULL,
  block = NULL,
  weightvar = if ("weights" \%in\% assayNames(object)) "weights" else NULL,
  statvars = c("effect", "p", "se", "t")[1:2],
  sep = FITSEP,
  suffix = paste0(sep, "lm"),
  coefs = model_coefs(object, formula = formula, drop = drop, codingfun = codingfun),
  contrasts = NULL,
  ftest = if (is.null(coefs)) TRUE else FALSE,
  verbose = TRUE,
  plot = FALSE
)

fit_lme(
  object,
  formula = as.formula("~ subgroup"),
  drop = varlevels_dont_clash(object, all.vars(formula)),
  codingfun = contr.treatment.explicit,
  design = NULL,
  block = NULL,
  weightvar = if ("weights" \%in\% assayNames(object)) "weights" else NULL,
  opt = "optim",
  statvars = c("effect", "p", "se", "t")[1:2],
  sep = FITSEP,
  suffix = paste0(sep, "lme"),
  coefs = model_coefs(object, formula = formula, drop = drop, codingfun = codingfun),
  contrasts = NULL,
  ftest = if (is.null(coefs)) TRUE else FALSE,
  verbose = TRUE,
  plot = FALSE
)

fit_lmer(
  object,
  groupvar = "subgroup",
  formula = as.formula("~ subgroup"),
  drop = varlevels_dont_clash(object, all.vars(formula)),
  codingfun = contr.treatment.explicit,
  design = NULL,
  block = NULL,
  weightvar = if ("weights" \%in\% assayNames(object)) "weights" else NULL,
  statvars = c("effect", "p", "se", "t")[1:2],
  sep = FITSEP,
  suffix = paste0(sep, "lmer"),
  coefs = model_coefs(object, formula = formula, drop = drop, codingfun = codingfun),
  contrasts = NULL,
  ftest = if (is.null(coefs)) TRUE else FALSE,
  verbose = TRUE,
  plot = FALSE
)
}
\arguments{
\item{object}{SummarizedExpriment}

\item{fit}{'lm', 'lme', or 'lmer'}

\item{groupvar}{svar}

\item{formula}{formula}

\item{drop}{TRUE or FALSE}

\item{codingfun}{coding function}

\item{coefs}{NULL or stringvector}

\item{block}{NULL or svar}

\item{opt}{optimizer used in fit_lme: 'optim' (more robust) or 'nlminb'}

\item{weightvar}{NULL or svar}

\item{statvars}{character vector: subset of c('effect', 'p', 'fdr', 't')}

\item{ftest}{TRUE or FALSE}

\item{sep}{string}

\item{suffix}{string: pvar suffix ("lm" in "p~t2~lm")}

\item{verbose}{TRUE or FALSE}

\item{plot}{TRUE or FALSE}

\item{design}{NULL}

\item{contrasts}{unused. only to allow generic get(fitfun)(contrasts)}
}
\value{
SummarizedExperiment
}
\description{
Fit lm, lme, or lmer
}
\examples{
file <- system.file('extdata/atkin.metabolon.xlsx', package = 'autonomics')
object <- read_metabolon(file)
fit_lm(     object, formula = ~subgroup)
fit_limma(  object, formula = ~subgroup)
fit_limma(  object, formula = ~subgroup, block = 'Subject' )
fit_lme(    object, formula = ~subgroup, block = 'Subject' )
fit_lmer(   object, formula = ~subgroup, block = 'Subject' )
# fit_lme(  object, formula = ~subgroup, block = ~1|Subject) # needs fine-tuning
# fit_lmer( object, formula = ~subgroup + (1|Subject))       # needs fine-tuning
}
