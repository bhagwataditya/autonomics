% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/8_fit_limma.R
\name{code}
\alias{code}
\title{Contrast Code Factor}
\usage{
code(x, contr.fun = contr.treat.first, verbose = TRUE)
}
\arguments{
\item{x}{factor/character vector}

\item{contr.fun}{contrast coding function: contr.treatment, contr.sum, contr.helmert}

\item{verbose}{TRUE or FALSE}
}
\value{
(explicitly coded) factor vector
}
\description{
Contrast Code Factor for General Linear Model
}
\details{
A General Linear Model contains:                                                                   \cr
  * An Intercept Coefficient: expressing some form of sample average                               \cr
  * For each numeric variable: a slope coefficient                                                 \cr
  * For each k-leveled factor: (k-1) Contrast Coefficients.                                        \cr
       Their interpretation (and that of the intercept) depends on the coding function used.
       Several contrast coding functions are provided in 'stats' and 'codingMatrices'
       Because their namings are somewhat confusing, we provide intuitive front-ends to the most used ones:
           `contr.treat.first`  : coef(k) = level(k) - level(1),    intercept = level(1)
           `contr.treat.grand`  : coef(k) = level(k) - level(1),    intercept = grandmean
           `contr.sdiff.first`  : coef(k) = level(k) - level(k-1);  intercept = level(1)
           `contr.sdiff.grand`  : coef(k) = level(k) - level(k-1);  intercept = grandmean
           `contr.sum.grand`    : coef(k) = level(k) - grandmean;   intercept = grandmean
           `contr.helmert.grand`: coef(k) = level(k) - mean(1:k-1); intercept = grandmean
}
\examples{
# Code alternatively
    require(codingMatrices)
    x <- paste0('t', 0:3)
    x \%<>\% code(contr.treat.first)
    x \%<>\% code(contr.treat.grand)
    x \%<>\% code(contr.sdiff.first)
    x \%<>\% code(contr.sdiff.grand)
    x \%<>\% code(contr.sum.grand)
    x \%<>\% code(contr.helmert.grand)

# Effects on Statistics
    file <- download_data('atkin18.metabolon.xlsx')
    object <- read_metabolon(file)
    object$subgroup \%<>\% code(contr.treat.first);   object \%<>\% fit_limma()
    object$subgroup \%<>\% code(contr.treat.grand);   object \%<>\% fit_limma()
    object$subgroup \%<>\% code(contr.sdiff.first);   object \%<>\% fit_limma()
    object$subgroup \%<>\% code(contr.sdiff.grand);   object \%<>\% fit_limma()
    object$subgroup \%<>\% code(contr.sum.grand);     object \%<>\% fit_limma()
    object$subgroup \%<>\% code(contr.helmert.grand); object \%<>\% fit_limma()
}
