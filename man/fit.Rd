% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/8_fit_limma.R, R/8_fit_wilcoxon.R
\name{fit}
\alias{fit}
\alias{fit_limma}
\alias{.fit_limma}
\alias{fit_wilcoxon}
\title{Fit model and test for differential expression}
\usage{
fit(
  object,
  formula = default_formula(object),
  engine = "limma",
  drop = varlevels_dont_clash(object, all.vars(formula)),
  codingfun = contr.treatment,
  design = create_design(object, formula = formula, drop = drop, codingfun = codingfun),
  contrasts = NULL,
  coefs = if (is.null(contrasts)) contrast_coefs(design = design) else NULL,
  block = NULL,
  weightvar = if ("weights" \%in\% assayNames(object)) "weights" else NULL,
  statvars = c("effect", "p", "se", "t")[1:2],
  sep = FITSEP,
  suffix = paste0(sep, "limma"),
  verbose = TRUE,
  plot = FALSE
)

fit_limma(
  object,
  formula = default_formula(object),
  drop = varlevels_dont_clash(object, all.vars(formula)),
  codingfun = contr.treatment,
  design = create_design(object, formula = formula, drop = drop, codingfun = codingfun),
  contrasts = NULL,
  coefs = if (is.null(contrasts)) contrast_coefs(design = design) else NULL,
  block = NULL,
  weightvar = if ("weights" \%in\% assayNames(object)) "weights" else NULL,
  statvars = c("effect", "p"),
  sep = FITSEP,
  suffix = paste0(sep, "limma"),
  verbose = TRUE,
  plot = FALSE
)

.fit_limma(
  object,
  formula = default_formula(object),
  drop = varlevels_dont_clash(object, all.vars(formula)),
  codingfun = contr.treatment,
  design = create_design(object, formula = formula, drop = drop, codingfun = codingfun),
  contrasts = NULL,
  coefs = if (is.null(contrasts)) setdiff(colnames(design), "Intercept") else NULL,
  block = NULL,
  weightvar = if ("weights" \%in\% assayNames(object)) "weights" else NULL,
  statvars = c("effect", "p", "se", "t")[1:2],
  sep = FITSEP,
  suffix = paste0(sep, "limma"),
  verbose = TRUE,
  plot = FALSE
)

fit_wilcoxon(
  object,
  formula = default_formula(object),
  drop = NULL,
  codingfun = contr.treatment.explicit,
  contrasts = NULL,
  coefs = NULL,
  block = NULL,
  weightvar = NULL,
  statvars = c("effect", "p"),
  sep = FITSEP,
  verbose = TRUE,
  plot = FALSE
)
}
\arguments{
\item{object}{SummarizedExperiment}

\item{formula}{modeling formula}

\item{engine}{'limma', 'lm', 'lme', 'lmer', or 'wilcoxon'}

\item{drop}{TRUE or FALSE}

\item{codingfun}{factor coding function
\itemize{
    \item contr.treatment:          intercept = y0,     coefi = yi - y0
    \item contr.treatment.explicit: intercept = y0,     coefi = yi - y0
    \item code_control:             intercept = ymean,  coefi = yi - y0
    \item contr.diff:               intercept = y0,     coefi = yi - y(i-1)
    \item code_diff:                intercept = ymean,  coefi = yi - y(i-1)
    \item code_diff_forward:        intercept = ymean,  coefi = yi - y(i+)
    \item code_deviation:           intercept = ymean,  coefi = yi - ymean (drop last)
    \item code_deviation_first:     intercept = ymean,  coefi = yi - ymean (drop first)
    \item code_helmert:             intercept = ymean,  coefi = yi - mean(y0:(yi-1))
    \item code_helmert_forward:     intercept = ymean,  coefi = yi - mean(y(i+1):yp)
}}

\item{design}{design matrix}

\item{contrasts}{NULL or character vector: coefficient contrasts to test}

\item{coefs}{NULL or character vector: model coefs to test}

\item{block}{block svar (or NULL)}

\item{weightvar}{NULL or name of weight matrix in assays(object)}

\item{statvars}{character vector: subset of c('effect', 'p', 'fdr', 't', 'se')}

\item{sep}{string: pvar separator  ("~" in "p~t2~limma")}

\item{suffix}{string: pvar suffix ("limma" in "p~t2~limma")}

\item{verbose}{whether to msg}

\item{plot}{whether to plot}
}
\value{
Updated SummarizedExperiment
}
\description{
Fit model and test for differential expression
}
\examples{
# Read
  file <- system.file('extdata/atkin.metabolon.xlsx', package = 'autonomics')
  object <- read_metabolon(file)
    
# Standard
  fdt(object) \%<>\% extract(, 'feature_id')
  object \%<>\% fit_lm(        ~ subgroup)                     #     statistics default
  object \%<>\% fit_limma(     ~ subgroup)                     # bioinformatics default
  summarize_fit(fdt(object))
    
# Blocked
  fdt(object) \%<>\% extract(, 'feature_id')
  object \%<>\% fit_limma(     ~ subgroup, block = 'Subject')  #        simple random effects
  object \%<>\% fit_lme(       ~ subgroup, block = 'Subject')  #      powerful random effects
  object \%<>\% fit_lmer(      ~ subgroup, block = 'Subject')  # more powerful random effects
  summarize_fit(fdt(object))
    
# Alternative coding: e.g. grand mean intercept
  fdt(object) \%<>\% extract(, 'feature_id')
  object \%<>\% fit_limma(     ~ subgroup, block = 'Subject', codingfun = code_control)
  object \%<>\% fit_lme(       ~ subgroup, block = 'Subject', codingfun = code_control)
  object \%<>\% fit_lmer(      ~ subgroup, block = 'Subject', codingfun = code_control)
  summarize_fit(fdt(object))
    
# Posthoc contrasts (only limma!)
  fdt(object) \%<>\% extract(, 'feature_id')
  object \%<>\% fit_limma( ~ subgroup, block = 'Subject', codingfun = code_control, coefs ='t1-t0')
  object \%<>\% fit_limma( ~ 0 + subgroup, block = 'Subject', contrasts = 't1-t0')
      # flexible, but only approximate
      # stat.ethz.ch/pipermail/bioconductor/2014-February/057682.html
        
# Non-parametric: wilcoxon
  fdt(object) \%<>\% extract(, 'feature_id')
  object \%<>\% fit_wilcoxon( ~ subgroup)                    # unpaired
  object \%<>\% fit_wilcoxon( ~ subgroup, block = 'Subject') # paired
    
# Custom separator
  fdt(object) \%<>\% extract(, 'feature_id')
  fdt( fit_lm(      object, sep = '.'))
  fdt( fit_limma(   object, block = 'Subject', sep = '.') )
  fdt( fit_lme(     object, block = 'Subject', sep = '.') )
  fdt( fit_lmer(    object, block = 'Subject', sep = '.') )
  fdt( fit_wilcoxon(object, block = 'Subject', sep = '.') )
  fdt( fit_wilcoxon(object, sep = '.') )
}
