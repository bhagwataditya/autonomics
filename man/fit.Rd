% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/8_fit_limma.R, R/8_fit_wilcoxon.R
\name{fit}
\alias{fit}
\alias{fit_limma}
\alias{.fit_limma}
\alias{fit_wilcoxon}
\title{Fit model and test for differential expression}
\usage{
fit(
  object,
  formula = default_formula(object),
  engine = "limma",
  drop = varlevels_dont_clash(object, all.vars(formula)),
  coding = "treatment",
  design = create_design(object, formula = formula, drop = drop, coding = coding),
  contrasts = NULL,
  coefs = if (is.null(contrasts)) colnames(design) else NULL,
  block = NULL,
  weightvar = if ("weights" \%in\% assayNames(object)) "weights" else NULL,
  statvars = c("effect", "p", "fdr"),
  sep = FITSEP,
  suffix = paste0(sep, "limma"),
  verbose = TRUE,
  plot = FALSE
)

fit_limma(
  object,
  formula = default_formula(object),
  drop = varlevels_dont_clash(object, all.vars(formula)),
  coding = "treatment",
  design = create_design(object, formula = formula, drop = drop, coding = coding),
  contrasts = NULL,
  coefs = if (is.null(contrasts)) colnames(design) else NULL,
  block = NULL,
  weightvar = if ("weights" \%in\% assayNames(object)) "weights" else NULL,
  statvars = c("effect", "p", "fdr"),
  sep = FITSEP,
  suffix = paste0(sep, "limma"),
  verbose = TRUE,
  plot = FALSE
)

.fit_limma(
  object,
  formula = default_formula(object),
  drop = varlevels_dont_clash(object, all.vars(formula)),
  coding = "treatment",
  design = create_design(object, formula = formula, drop = drop, coding = coding),
  contrasts = NULL,
  coefs = if (is.null(contrasts)) colnames(design) else NULL,
  block = NULL,
  weightvar = if ("weights" \%in\% assayNames(object)) "weights" else NULL,
  statvars = c("effect", "p", "fdr"),
  sep = FITSEP,
  suffix = paste0(sep, "limma"),
  verbose = TRUE,
  plot = FALSE
)

fit_wilcoxon(
  object,
  formula = default_formula(object),
  drop = NULL,
  coding = "baseline",
  contrasts = NULL,
  coefs = NULL,
  block = NULL,
  weightvar = NULL,
  statvars = c("effect", "p", "fdr"),
  verbose = TRUE,
  plot = FALSE
)
}
\arguments{
\item{object}{SummarizedExperiment}

\item{formula}{modeling formula}

\item{drop}{TRUE or FALSE}

\item{coding}{factor coding system: 'treatment', 'baseline', 'backward', 
'baselinegrand',  'backwardgrand', 'sum', 'helmert'}

\item{design}{design matrix}

\item{contrasts}{NULL or character vector: coefficient contrasts to test}

\item{coefs}{NULL or character vector: model coefs to test}

\item{block}{block svar (or NULL)}

\item{weightvar}{NULL or name of weight matrix in assays(object)}

\item{statvars}{character vector: subset of c('effect', 'p', 'fdr', 't')}

\item{sep}{string: pvar separator  ("~" in "p~t2~limma")}

\item{suffix}{string: pvar suffix ("limma" in "p~t2~limma")}

\item{verbose}{whether to msg}

\item{plot}{whether to plot}
}
\value{
Updated SummarizedExperiment
}
\description{
Fit model and test for differential expression
}
\examples{
# Default
    file <- download_data('atkin18.metabolon.xlsx')
    object <- read_metabolon(file)
    object \%<>\% fit(~ subgroup)
# Standard
    object \%<>\% fit_lm(        ~ subgroup)                 #     statistics default
    object \%<>\% fit_limma(     ~ subgroup)                 # bioinformatics default
# Blocked
    object \%<>\% fit_limma(     ~ subgroup, block = 'Subject')  #        simple random effects
    object \%<>\% fit_lme(       ~ subgroup, block = 'Subject')  #      powerful random effects
    object \%<>\% fit_lmer(      ~ subgroup, block = 'Subject')  # more powerful random effects
# Intuitive : alternative coding
    object \%<>\% fit_lme(       ~ subgroup, block = 'Subject', coding = 'baseline')
    object \%<>\% fit_lmer(      ~ subgroup, block = 'Subject', coding = 'baseline')
    object \%<>\% fit_limma(     ~ subgroup, block = 'Subject', coding = 'baseline')
# Flexible : limma contrasts
    object \%<>\% fit_limma( ~ 0 + subgroup, block = 'Subject', contrasts = c('t1-t0'))
        # flexible, but only approximate
        # stat.ethz.ch/pipermail/bioconductor/2014-February/057682.html
# Non-parametric: wilcoxon
    object \%<>\% fit_wilcoxon( ~ subgroup)                # unpaired
    object \%<>\% fit_wilcoxon( ~ subgroup, block = 'Subject') # paired
    plot_contrast_venn(is_sig(object, contrast = 't2', fit = c('lm', 'limma')))
   #plot_contrast_venn(is_sig(object, contrast = 't3', fit = c('limma', 'lme')))
}
